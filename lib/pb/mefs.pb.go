// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mefs.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetInfo_NetType int32

const (
	NetInfo_Unknown NetInfo_NetType = 0
	NetInfo_P2PAddr NetInfo_NetType = 1
)

var NetInfo_NetType_name = map[int32]string{
	0: "Unknown",
	1: "P2PAddr",
}

var NetInfo_NetType_value = map[string]int32{
	"Unknown": 0,
	"P2PAddr": 1,
}

func (x NetInfo_NetType) String() string {
	return proto.EnumName(NetInfo_NetType_name, int32(x))
}

func (NetInfo_NetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b3c77393cf6fe78, []int{0, 0}
}

type NodeInfo_RoleType int32

const (
	NodeInfo_Unknown  NodeInfo_RoleType = 0
	NodeInfo_User     NodeInfo_RoleType = 1
	NodeInfo_Provider NodeInfo_RoleType = 2
	NodeInfo_Keeper   NodeInfo_RoleType = 3
)

var NodeInfo_RoleType_name = map[int32]string{
	0: "Unknown",
	1: "User",
	2: "Provider",
	3: "Keeper",
}

var NodeInfo_RoleType_value = map[string]int32{
	"Unknown":  0,
	"User":     1,
	"Provider": 2,
	"Keeper":   3,
}

func (x NodeInfo_RoleType) String() string {
	return proto.EnumName(NodeInfo_RoleType_name, int32(x))
}

func (NodeInfo_RoleType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2b3c77393cf6fe78, []int{1, 0}
}

// register on data chain
// key: 'NetInfoKey'/NodeID(fsID);
type NetInfo struct {
	Type                 NetInfo_NetType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.NetInfo_NetType" json:"type,omitempty"`
	NetID                []byte          `protobuf:"bytes,2,opt,name=netID,proto3" json:"netID,omitempty"`
	Addr                 []byte          `protobuf:"bytes,3,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *NetInfo) Reset()         { *m = NetInfo{} }
func (m *NetInfo) String() string { return proto.CompactTextString(m) }
func (*NetInfo) ProtoMessage()    {}
func (*NetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3c77393cf6fe78, []int{0}
}
func (m *NetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetInfo.Merge(m, src)
}
func (m *NetInfo) XXX_Size() int {
	return m.Size()
}
func (m *NetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NetInfo proto.InternalMessageInfo

func (m *NetInfo) GetType() NetInfo_NetType {
	if m != nil {
		return m.Type
	}
	return NetInfo_Unknown
}

func (m *NetInfo) GetNetID() []byte {
	if m != nil {
		return m.NetID
	}
	return nil
}

func (m *NetInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

// key: 'NodeInfoKey'/'RoleType'/NodeID
type NodeInfo struct {
	Role                 NodeInfo_RoleType `protobuf:"varint,1,opt,name=role,proto3,enum=pb.NodeInfo_RoleType" json:"role,omitempty"`
	NodeID               uint64            `protobuf:"varint,2,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	GroupID              uint64            `protobuf:"varint,3,opt,name=groupID,proto3" json:"groupID,omitempty"`
	ChainSignKey         []byte            `protobuf:"bytes,4,opt,name=chainSignKey,proto3" json:"chainSignKey,omitempty"`
	BlsSignKey           []byte            `protobuf:"bytes,5,opt,name=blsSignKey,proto3" json:"blsSignKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeInfo) Reset()         { *m = NodeInfo{} }
func (m *NodeInfo) String() string { return proto.CompactTextString(m) }
func (*NodeInfo) ProtoMessage()    {}
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b3c77393cf6fe78, []int{1}
}
func (m *NodeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfo.Merge(m, src)
}
func (m *NodeInfo) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfo proto.InternalMessageInfo

func (m *NodeInfo) GetRole() NodeInfo_RoleType {
	if m != nil {
		return m.Role
	}
	return NodeInfo_Unknown
}

func (m *NodeInfo) GetNodeID() uint64 {
	if m != nil {
		return m.NodeID
	}
	return 0
}

func (m *NodeInfo) GetGroupID() uint64 {
	if m != nil {
		return m.GroupID
	}
	return 0
}

func (m *NodeInfo) GetChainSignKey() []byte {
	if m != nil {
		return m.ChainSignKey
	}
	return nil
}

func (m *NodeInfo) GetBlsSignKey() []byte {
	if m != nil {
		return m.BlsSignKey
	}
	return nil
}

func init() {
	proto.RegisterEnum("pb.NetInfo_NetType", NetInfo_NetType_name, NetInfo_NetType_value)
	proto.RegisterEnum("pb.NodeInfo_RoleType", NodeInfo_RoleType_name, NodeInfo_RoleType_value)
	proto.RegisterType((*NetInfo)(nil), "pb.NetInfo")
	proto.RegisterType((*NodeInfo)(nil), "pb.NodeInfo")
}

func init() { proto.RegisterFile("mefs.proto", fileDescriptor_2b3c77393cf6fe78) }

var fileDescriptor_2b3c77393cf6fe78 = []byte{
	// 302 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xbb, 0x4e, 0xf3, 0x30,
	0x14, 0xc7, 0xeb, 0xd6, 0x6d, 0xa3, 0xf3, 0x55, 0x9f, 0xac, 0xc3, 0x45, 0x99, 0xa2, 0x2a, 0x0c,
	0x94, 0x25, 0x43, 0x19, 0x99, 0x40, 0x5d, 0xaa, 0x4a, 0x55, 0x15, 0xe8, 0x03, 0x34, 0xf8, 0xb4,
	0x54, 0x04, 0xdb, 0x72, 0x02, 0x28, 0x23, 0x6f, 0xc1, 0x23, 0x31, 0xf2, 0x08, 0x28, 0x2c, 0x3c,
	0x06, 0x8a, 0x93, 0x48, 0x74, 0xb2, 0xff, 0x17, 0x5b, 0xbf, 0xa3, 0x03, 0xf0, 0x44, 0xdb, 0x2c,
	0x32, 0x56, 0xe7, 0x1a, 0xbb, 0x26, 0x09, 0xdf, 0x18, 0x0c, 0x97, 0x94, 0xcf, 0xd5, 0x56, 0xe3,
	0x39, 0xf0, 0xbc, 0x30, 0xe4, 0xb3, 0x31, 0x9b, 0xfc, 0x9f, 0x1e, 0x45, 0x26, 0x89, 0x9a, 0xa8,
	0x3a, 0xef, 0x0a, 0x43, 0xb1, 0x2b, 0xe0, 0x31, 0xf4, 0x15, 0xe5, 0xf3, 0x99, 0xdf, 0x1d, 0xb3,
	0xc9, 0x28, 0xae, 0x05, 0x22, 0xf0, 0x8d, 0x94, 0xd6, 0xef, 0x39, 0xd3, 0xdd, 0xc3, 0x33, 0xf7,
	0x7b, 0xf5, 0x14, 0xff, 0xc1, 0x70, 0xad, 0x1e, 0x95, 0x7e, 0x55, 0xa2, 0x53, 0x89, 0xd5, 0x74,
	0x75, 0x2d, 0xa5, 0x15, 0x2c, 0xfc, 0x61, 0xe0, 0x2d, 0xb5, 0x24, 0x07, 0x71, 0x01, 0xdc, 0xea,
	0xb4, 0x85, 0x38, 0x71, 0x10, 0x4d, 0x16, 0xc5, 0x3a, 0xa5, 0x1a, 0xa3, 0xaa, 0xe0, 0x29, 0x0c,
	0x54, 0x15, 0xd5, 0x1c, 0x3c, 0x6e, 0x14, 0xfa, 0x30, 0xdc, 0x59, 0xfd, 0x6c, 0xe6, 0x33, 0xc7,
	0xc2, 0xe3, 0x56, 0x62, 0x08, 0xa3, 0xfb, 0x87, 0xcd, 0x5e, 0xdd, 0xee, 0x77, 0x6a, 0x41, 0x85,
	0xcf, 0x1d, 0xea, 0x81, 0x87, 0x01, 0x40, 0x92, 0x66, 0x6d, 0xa3, 0xef, 0x1a, 0x7f, 0x9c, 0xf0,
	0x0a, 0xbc, 0x96, 0xe3, 0x70, 0x26, 0x0f, 0xf8, 0x3a, 0x23, 0x2b, 0x18, 0x8e, 0xc0, 0x5b, 0x59,
	0xfd, 0xb2, 0x97, 0x64, 0x45, 0x17, 0x01, 0x06, 0x0b, 0x22, 0x43, 0x56, 0xf4, 0x6e, 0xc4, 0x47,
	0x19, 0xb0, 0xcf, 0x32, 0x60, 0x5f, 0x65, 0xc0, 0xde, 0xbf, 0x83, 0x4e, 0x32, 0x70, 0xbb, 0xb8,
	0xfc, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x96, 0xc3, 0xda, 0x57, 0x99, 0x01, 0x00, 0x00,
}

func (m *NetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintMefs(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NetID) > 0 {
		i -= len(m.NetID)
		copy(dAtA[i:], m.NetID)
		i = encodeVarintMefs(dAtA, i, uint64(len(m.NetID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintMefs(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlsSignKey) > 0 {
		i -= len(m.BlsSignKey)
		copy(dAtA[i:], m.BlsSignKey)
		i = encodeVarintMefs(dAtA, i, uint64(len(m.BlsSignKey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ChainSignKey) > 0 {
		i -= len(m.ChainSignKey)
		copy(dAtA[i:], m.ChainSignKey)
		i = encodeVarintMefs(dAtA, i, uint64(len(m.ChainSignKey)))
		i--
		dAtA[i] = 0x22
	}
	if m.GroupID != 0 {
		i = encodeVarintMefs(dAtA, i, uint64(m.GroupID))
		i--
		dAtA[i] = 0x18
	}
	if m.NodeID != 0 {
		i = encodeVarintMefs(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x10
	}
	if m.Role != 0 {
		i = encodeVarintMefs(dAtA, i, uint64(m.Role))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMefs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMefs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMefs(uint64(m.Type))
	}
	l = len(m.NetID)
	if l > 0 {
		n += 1 + l + sovMefs(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovMefs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != 0 {
		n += 1 + sovMefs(uint64(m.Role))
	}
	if m.NodeID != 0 {
		n += 1 + sovMefs(uint64(m.NodeID))
	}
	if m.GroupID != 0 {
		n += 1 + sovMefs(uint64(m.GroupID))
	}
	l = len(m.ChainSignKey)
	if l > 0 {
		n += 1 + l + sovMefs(uint64(l))
	}
	l = len(m.BlsSignKey)
	if l > 0 {
		n += 1 + l + sovMefs(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMefs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMefs(x uint64) (n int) {
	return sovMefs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMefs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NetInfo_NetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMefs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMefs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetID = append(m.NetID[:0], dAtA[iNdEx:postIndex]...)
			if m.NetID == nil {
				m.NetID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMefs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMefs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMefs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMefs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMefs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			m.Role = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Role |= NodeInfo_RoleType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			m.GroupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainSignKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMefs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMefs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainSignKey = append(m.ChainSignKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainSignKey == nil {
				m.ChainSignKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlsSignKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMefs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMefs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlsSignKey = append(m.BlsSignKey[:0], dAtA[iNdEx:postIndex]...)
			if m.BlsSignKey == nil {
				m.BlsSignKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMefs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMefs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMefs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMefs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMefs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMefs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMefs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMefs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMefs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMefs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMefs = fmt.Errorf("proto: unexpected end of group")
)
